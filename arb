#!/bin/bash
# A.R.B. Automatic Robust Backup

# LIB
arb_tmp=/run/user/$(id -u)/arb

umountCrypt() {
# Unmount a Gocryptfs directory
    while getopts "n:" opt; do
      case $opt in
        n) name=$OPTARG;;
        *) printf "<3>ERROR: %s\n" "Something is wrong!";;
      esac
    done

    if ! [ "$name" ]; then
        printf "<3>ERROR: %s\n" "Missing required arguments!" && return 1
    fi

    mount="$arb_tmp/$name"
	([ -d "$mount" ] && fusermount -uz "$mount") || # try to unmount if it exists
    (printf "<3>ERROR: %s\n" "unmounting $name failed"; return 1) # print and return error if it fails 
	[ -n "$(ls -A "$mount")" ] || rm -r "$mount" # remove dir if empty
}

mountCrypt() {
# Mount a Gocryptfs directory
    while getopts "n:i:p:e:" opt; do
      case $opt in
        n) name=$OPTARG;;
        i) input=$OPTARG;;
        p) pass=$OPTARG;;
        e) exclude_file=$OPTARG;; #optional
        *) printf "<3>ERROR: %s\n" "Something is wrong!";;
      esac
    done

    if ! [ "$name" ] && [ "$input" ] && [ "$pass" ]; then
        printf "<3>ERROR: %s\n" "Missing required arguments!" && return 1
    fi

    mount="$arb_tmp/$name"
	if [ -d "$mount" ] && [[ -n "$(ls -A "$mount")" ]]; then # if mount exists and is not empty
        printf "<4>WARNING: %s\n" "$name is already mounted, unmounting..."
        (umountCrypt -n "$name" && sleep 2) || return 1 # unmount if already mounted
    fi
	
    if ! [ -d "$input" ]; then # check if input dir exists
        printf "<3>ERROR: %s\n" "$input does not exist!" && return 1
    fi
    
    mkdir -p "$mount" # create mountpoint dir if inexistent
	gocryptfs -extpass pass -extpass "$pass" ${exclude_file:+-exclude-from "$exclude_file"} -reverse "$input" "$mount"
}

syncDisk() {
# Sync a dir to disk
    while getopts "n:i:o:" opt; do
      case $opt in
        n) name=$OPTARG;;
        i) input=$OPTARG;; # optional
        o) output=$OPTARG;;
        *) printf "<3>ERROR: %s\n" "Something is wrong!";;
      esac
    done

    if ! [ "$name" ] && [ "$output" ]; then
        printf "<3>ERROR: %s\n" "Missing required arguments!" && return 1
    fi

	rsync -a --delete "${input:=$arb_tmp/$name}/" "$output/" # assign value to $input with not set
}

syncCloud() {
# Sync a dir to a cloud bucket
    while getopts "n:i:s:" opt; do
      case $opt in
        n) name=$OPTARG;;
        i) input=$OPTARG;; # optional
        s) streams=$OPTARG;;
        *) printf "<3>ERROR: %s\n" "Something is wrong!";;
      esac
    done
    
    if ! [ "$name" ] && [ "$streams" ]; then
        printf "<3>ERROR: %s\n" "Missing required arguments!" && return 1
    fi

    for stream in "${streams[@]}"; do
        printf "<5>NOTICE: %s\n" "syncing $name to $stream"
        rclone sync -u --use-server-modtime --skip-links --fast-list --max-backlog=-1 \
        "${input:=$arb_tmp/$name}/" "$stream:$name/" # assign value to $input with not set 
    done
}

archiveSys() {
# Archive system confs
    name="sys"
    while getopts "o:e:" opt; do
      case $opt in
        o) output=$OPTARG;;
        e) exclude=$OPTARG;;
        *) printf "<3>ERROR: %s\n" "Something is wrong!";;
      esac
    done
    
    if ! [ "$output" ] && [ "$exclude" ]; then
        printf "<3>ERROR: %s\n" "Missing required arguments!" && return 1
    fi

	mkdir -p "$output" # make dir if inexistent
	pacman -Qqen > "$output/pkglist.txt" # export non-local pkg list
	pacman -Qqem > "$output/pkglist-local.txt" # export local pkg list
	export CVSIGNORE="$exclude" && rsync -qaH --delete -C /etc/ "$output/etc/" # sync /etc
	git -C "$output" add -A && git -C "$output" commit -m "$(date +%Y-%m-%d)" # archive changes in git
}

# TODO: Use etckeeper to archive system /etc
# https://wiki.archlinux.org/index.php/Etckeeper 

archiveBorg() {
# Archive a dir with borg (default)
    while getopts "n:i:o:e:p:k:l" opt; do
      case $opt in
        n) name=$OPTARG;;
        i) input=$OPTARG;;
        o) output=$OPTARG && export BORG_REPO="$output";;
        e) exclude_file=$OPTARG;;
        p) pass=$OPTARG && export BORG_PASSCOMMAND="pass $pass";; # optional
        k) key=$OPTARG && export BORG_KEY_FILE="$key";; # optional
        l) lite=1;; # optional
        *) printf "<3>ERROR: %s\n" "Something is wrong!";;
      esac
    done
    
    if ! [ "$name" ] && [ "$input" ] && [ "$output" ] && [ "$exclude_file" ]; then
        printf "<3>ERROR: %s\n" "Missing required arguments!" && return 1
    fi

    if ! [ $lite -eq 1 ]; then
        borg create -s -x -C lz4 --exclude-from "$exclude_file" "::{user}-{now:%y-%m-%d}" "$input" # archive
        borg prune --list --keep-daily=7 --keep-weekly=4 --keep-monthly=6 # purge old
    else
        borg create -s -x -C auto,lzma --exclude-from "$exclude_file" --chunker-params 10,23,16,4095 \
"::{user}-{now:%y-%m-%d}" "$input" # higher compression and fine granularity
        borg prune --list --keep-last=2
    fi
}

# Decorate
decorate() {
# Decorator for logging
    eval "
        _inner_$(typeset -f "$1")
        $1"'() {
            printf >&2 "<5>NOTICE: %s\n" "'$1' started"
            _inner_'$1' "$@"
            local ret=$?
            printf >&2 "<5>NOTICE: %s\n" "'$1' ended with status $ret"
            return "$ret"
        }'
}

# MAIN
# Exit without doing anything if already being executed
for pid in $(pidof -x arb); do 
    if [ "$pid" != $$ ]; then
	    printf "<3>ERROR: %s\n" "program is already running with PID '"$pid"'!"
        exit 1
    fi
done

# Trap ^C to allow forceful exit from child
trap ctrl_c INT 
ctrl_c() {
    kill -15 "$child" && wait "$child" # send SIGTERM to child process

    # loop through existent dirs and try to umount/rm them
    mapfile -t mounts < <(fd --type d --max-depth 1 --base-directory "$arb_tmp")
    for name in "${mounts[@]}"; do
        umountCrypt -n "$name"
    done

    [ "$mount" ] && umountCrypt -n "$mount" # unmount last mount point
    printf "<3>ERROR: %s\n" "program with PID '"$child"' was manually terminated!"
    exit 1
}

# Decorate functions with logging
decorate syncDisk
decorate syncCloud
decorate archiveSys
decorate archiveBorg

# Source variables and commands from config file
config="$HOME/.config/arb/config"
if [ -f "$config" ]; then # exit with config not found
    source "$config"
else
    printf "<3>ERROR: %s\n" "config file not found!"
    exit 1
fi
