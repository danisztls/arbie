#!/usr/bin/env bash
#
# Arbie: Automatic Robust Backup
#
# @author: Daniel Souza <me@posix.dev.br>
# @license: MIT
# @usage: arbie
# @deps: borg, gocryptfs, rclone, rsync, git, gopass | pass

# shellcheck disable=2034,2059

# UTILS
# -----
# Log format strings
if [ "$TERM" == "dumb" ]; then # is it running under systemd?
  emerg="<0>%s\n" # red
  alert="<1>%s\n"
  crit="<2>%s\n"
  err="<3>%s\n"
  warning="<4>%s\n" # yellow
  notice="<5>%s\n" # white
  info="<6>%s\n"
  debug="<7>%s\n" # muted 

else
  reset="\e[0;0m"
  strong="\e[1;0m"
  muted="\e[1;30m"
  red="\e[1;31m"
  yellow="\e[1;33m"

  emerg="${red}EMERGENCY: %s${reset}\n"
  alert="${red}ALERT: %s${reset}\n"
  crit="${red}CRITICAL: %s${reset}\n"
  error="${red}ERROR: %s${reset}\n"
  warning="${yellow}WARNING: %s${reset}\n"
  notice="${strong}NOTICE: %s${reset}\n"
  info="INFO: %s\n"
  debug="${muted}DEBUG: %s${reset}\n"
fi

# Function log decorator
_decorate() {
  # shellcheck disable=2086
  eval "_inner_$(typeset -f "$1")
  $1"'() {
    printf >&2 "$notice" "'$1' started"
    _inner_'$1' "$@"
    local ret=$?
    printf >&2 "$notice" "'$1' ended with status $ret"
    return "$ret"
  }'
}

# ENV
# ---
# Debug
# set -e # exit when a error is returned
# use ||: at EOL to ignore errors

# Check if already being executed
for pid in $(pidof -x arbie); do
  if [ "$pid" != $$ ]; then
    printf "$err" "Program is already running with PID '$pid'"
    exit 1
  fi
done

# Check dependencies
deps=(borg gocryptfs rclone rsync git)
for dep in "${deps[@]}"; do
  if ! [[ $(command -v "$dep") ]]; then
    printf "$err" "$dep not found" && exit 1
  fi
done

# Check password manager
pass_bin=$(command -v gopass) # gopass by default
pass_bin=${pass_bin:-$(command -v pass)} # pass as fallback

if ! [ "$pass_bin" ]; then # exit if none
  printf "$err" "Gopass or pass not found" && exit 1
fi

# Check config file
config="${XDG_CONFIG_HOME:-${HOME}}/arbie/config"

if ! [ -f "$config" ]; then
  printf "$err" "Config file not found, templates at '/usr/share/arbie/'" && exit 1
fi

# Set temporary dir 
tmp="/run/user/$(id -u)/arbie" # for systems with systemd

# LIB
# ---
# Unmount a Gocryptfs file system 
umountCrypt() {
  local OPTIND name mount
  while getopts "n:" opt; do
    case $opt in
      n) name=$OPTARG;;
      *) printf "$err" "${FUNCNAME[0]}: invalid arguments";;
    esac
  done

  if ! [ "$name" ]; then
    printf "$err" "${FUNCNAME[0]}: missing required arguments" && return 1
  fi

  mount="$tmp/$name"
  ([ -d "$mount" ] && fusermount -uz "$mount") || # try to unmount if it exists
  (printf "$err" "${FUNCNAME[0]}: Failed to unmount $name"; return 1) # print and return error if it fails
  [ -n "$(find "$mount" -maxdepth 0 -type d -empty 2>/dev/null)" ] && rm -r "$mount" # remove dir if empty
}

# Mount a Gocryptfs file system 
mountCrypt() {
  local OPTIND name input pass exclude_file mount
  while getopts "n:i:p:e:" opt; do
    case $opt in
      n) name=$OPTARG;;
      i) input=$OPTARG;;
      p) pass=$OPTARG;;
      e) exclude_file=$OPTARG;; #optional
      *) printf "$err" "${FUNCNAME[0]}: invalid arguments";;
    esac
  done

  if ! [ "$name" ] && [ "$input" ] && [ "$pass" ]; then
    printf "$err" "${FUNCNAME[0]}: missing required arguments" && return 1
  fi

  mount="$tmp/$name"
  if [ -d "$mount" ] && [ -z "$(find "$mount" -maxdepth 0 -type d -empty 2>/dev/null)" ]; then # if mount exists and is not empty
    printf "$warning" "${FUNCNAME[0]}: $name is already mounted, unmounting..."
    (umountCrypt -n "$name" && sleep 2) || return 1 # unmount if already mounted
  fi

  if ! [ -d "$input" ]; then # check if input dir exists
    printf "$err" "${FUNCNAME[0]}: $input does not exist" && return 1
  fi

  mkdir -p "$mount" # create mountpoint dir if inexistent
  gocryptfs -extpass "$pass_bin" -extpass "$pass" ${exclude_file:+-exclude-from "$exclude_file"} -reverse "$input" "$mount"
}

# Sync a directory to disk
syncDisk() {
  local OPTIND name input output
  while getopts "n:i:o:" opt; do
    case $opt in
      n) name=$OPTARG;;
      i) input=$OPTARG;; # optional
      o) output=$OPTARG;;
      *) printf "$err" "${FUNCNAME[1]}: invalid arguments";;
    esac
  done

  if ! [ "$name" ] && [ "$output" ]; then
    printf "$err" "${FUNCNAME[1]}: missing required arguments" && return 1
  fi

	rsync -a --delete "${input:-$tmp/$name}/" "$output/" # assign value to $input with not set
}

# Sync a directory to a rclone bucket
syncCloud() {
  local OPTIND name input streams
  while getopts "n:i:s:" opt; do
    case $opt in
      n) name=$OPTARG;;
      i) input=$OPTARG;; # optional
      s) read -r -a streams <<< "$OPTARG";;
      *) printf "$err" "${FUNCNAME[1]}: invalid arguments";;
    esac
  done

  # shellcheck disable=2128
  if ! [ "$name" ] && [ "$streams" ]; then
    printf "$err" "${FUNCNAME[1]}: missing required arguments" && return 1
  fi

  for stream in "${streams[@]}"; do
    printf "$notice" "${FUNCNAME[1]}: syncing $name to $stream"
    rclone sync -u --use-server-modtime --skip-links --fast-list --max-backlog=-1 \
    "${input:-$tmp/$name}/" "$stream:$name/" # assign value to $input with not set
  done
}

# Archive system configs (pkg list & /etc)
archiveSys() {
  local OPTIND name output exclude
  name="sys"
  while getopts "o:e:" opt; do
    case $opt in
      o) output=$OPTARG;;
      e) exclude=$OPTARG;;
      *) printf "$err" "${FUNCNAME[1]}: invalid arguments";;
    esac
  done

  if ! [ "$output" ] && [ "$exclude" ]; then
    printf "$err" "${FUNCNAME[1]}: missing required arguments" && return 1
  fi

	mkdir -p "$output" # make dir if inexistent
	pacman -Qqen > "$output/pkglist.txt" # export non-local pkg list
	pacman -Qqem > "$output/pkglist-local.txt" # export local pkg list
	export CVSIGNORE="$exclude" && rsync -qaH --delete --ignore-errors -C /etc/ "$output/etc/" # sync /etc
  (git -C "$output" add -A && git -C "$output" commit -m "$(date +%Y-%m-%d)") ||: # archive changes in git
}

# Archive a directory with Borg
archiveBorg() {
  local OPTIND name input output exclude_file pass key lite
  while getopts "n:i:o:e:p:k:l" opt; do
    case $opt in
      n) name=$OPTARG;;
      i) input=$OPTARG;;
      o) output=$OPTARG && export BORG_REPO="$output";;
      e) exclude_file=$OPTARG;;
      p) pass=$OPTARG && export BORG_PASSCOMMAND="$pass_bin $pass";; # optional
      k) key=$OPTARG && export BORG_KEY_FILE="$key";; # optional
      l) lite=1;; # optional
      *) printf "$err" "${FUNCNAME[1]}: invalid arguments";;
    esac
  done

  if ! [ "$name" ] && [ "$input" ] && [ "$output" ] && [ "$exclude_file" ]; then
    printf "$err" "${FUNCNAME[1]}: missing required arguments" && return 1
  fi

  if ! [ $lite ]; then # default
    borg create -s -x -C lz4 --exclude-from "$exclude_file" "::{user}-{now:%y-%m-%dT%H:%M:%S}" "$input" &&
    borg prune --list --keep-daily=7 --keep-weekly=4 --keep-monthly=6 &&
    borg compact

  else # higher compression and fine granularity
    borg create -s -x -C auto,lzma --exclude-from "$exclude_file" --chunker-params 10,23,16,4095 "::{user}-{now:%y-%m-%dT%H:%M:%S}" "$input" &&
    borg prune --list --keep-last=2 &&
    borg compact
  fi
}

# MAIN
# ----
# Trap ^C to allow forceful exit from child
trap _ctrl_c INT

_ctrl_c() {
  pid=$!
  kill -15 $pid && sleep 5 && sync # send SIGTERM to child process

  # loop through existent dirs and try to umount/rm them
  mapfile -t mounts < <(fd --type d --max-depth 1 --base-directory "$tmp")
  for name in "${mounts[@]}"; do
    umountCrypt -n "$name"
  done

  [ "$mount" ] && umountCrypt -n "$mount" # unmount last mount point
  printf "$err" "program with PID '$pid' was manually terminated!"
  exit 1
}

# Decorate functions with logging
_decorate syncDisk
_decorate syncCloud
_decorate archiveSys
_decorate archiveBorg

# Source variables and commands
# shellcheck disable=1090
source "$config"
